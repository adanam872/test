<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan
		base-package="bitcamp.test">
		<context:exclude-filter type="regex"
			expression="bitcamp.test.controller.*" />
	</context:component-scan>

	<!-- 트랜잭션 관련 애노테이션을 처리할 객체들을 등록한다 -->
	<tx:annotation-driven
		transaction-manager="txManager" />

	<!-- Anotation이 아닌 Aop를 이용하여 트랜잭션을 관리할 수 있다. -->
	<!-- method 별로 어떻게 transaction을 적용할 지 설정한다 -->
	<!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean 
		below) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 트랜잭션을 적용할 대상을 설정한다 -->
	<!-- ensure that the above transactional advice runs for any execution
        of an operation defined by the FooService interface -->
    <aop:config>
        <!-- 트랜잭션을 적용할 대상의 규칙을 선언 -->
        <aop:pointcut id="serviceOperation" expression="execution(* bitcamp.test.service.*.*(..))"/>
        <!-- 대상에 대해 어떤 트랜잭션을 적용할 지 설정한다. -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
    </aop:config>

	<!-- 공장에서 SqlSessionFactory 만든기 -->
	<!-- 주의! 클래스 속성에 지정된 클래스가 factoryBean 구현체라면, 그 객체를 만들어 저장하는 것이 아니라 그 객체의 
		getObject를 호출하여 그 리턴 값을 저장한다. -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations"
			value="classpath*:bitcamp/test/sql/**/*.xml" />
		<property name="typeAliasesPackage"
			value="bitcamp.test.domain"></property>
	</bean>

	<!-- dataSource를 스프링에서 다시 지정해야 한다. -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc_driver}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- DAO 인터페이스로 부터 구현체를 자동 생성하는 객체 등록 => DAO 구현체가 사용할 SQL 맵퍼 파일은 namespace 
		값으로 찾는다 => 따라서 인터페이스 명과 SQL 맵퍼의 namespace 값은 같아야 한다. => 또한 인터페이스의 메서드명과 SQL 
		id는 같아야 한다. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="bitcamp.test.dao" />
	</bean>

	<!-- .properties 파일을 읽어서 그 데이터를 보관할 객체를 등록한다 -->
	<context:property-placeholder
		location="classpath:bitcamp/test/config/jdbc.properties" />

</beans>


